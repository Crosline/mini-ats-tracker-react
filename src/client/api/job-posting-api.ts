/* tslint:disable */
/* eslint-disable */
/**
 * Mini Ats Tracker API
 * A simple API for managing applicants and job postings
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JobPosting } from '../types';
// @ts-ignore
import type { JobPostingRequest } from '../types';
// @ts-ignore
import type { PatchedJobPostingRequest } from '../types';
/**
 * JobPostingApi - axios parameter creator
 * @export
 */
export const JobPostingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {JobPostingRequest} jobPostingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsCreate: async (jobPostingRequest: JobPostingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobPostingRequest' is not null or undefined
            assertParamExists('apiV1JobsCreate', 'jobPostingRequest', jobPostingRequest)
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobPostingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1JobsDestroy', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {PatchedJobPostingRequest} [patchedJobPostingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsPartialUpdate: async (id: number, patchedJobPostingRequest?: PatchedJobPostingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1JobsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobPostingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1JobsRetrieve', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {JobPostingRequest} jobPostingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsUpdate: async (id: number, jobPostingRequest: JobPostingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1JobsUpdate', 'id', id)
            // verify required parameter 'jobPostingRequest' is not null or undefined
            assertParamExists('apiV1JobsUpdate', 'jobPostingRequest', jobPostingRequest)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobPostingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobPostingApi - functional programming interface
 * @export
 */
export const JobPostingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobPostingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {JobPostingRequest} jobPostingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsCreate(jobPostingRequest: JobPostingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobsCreate(jobPostingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobPostingApi.apiV1JobsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobsDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobPostingApi.apiV1JobsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobPosting>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobsList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobPostingApi.apiV1JobsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {PatchedJobPostingRequest} [patchedJobPostingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsPartialUpdate(id: number, patchedJobPostingRequest?: PatchedJobPostingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobsPartialUpdate(id, patchedJobPostingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobPostingApi.apiV1JobsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobsRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobPostingApi.apiV1JobsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {JobPostingRequest} jobPostingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1JobsUpdate(id: number, jobPostingRequest: JobPostingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobPosting>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1JobsUpdate(id, jobPostingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobPostingApi.apiV1JobsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobPostingApi - factory interface
 * @export
 */
export const JobPostingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobPostingApiFp(configuration)
    return {
        /**
         * 
         * @param {JobPostingRequest} jobPostingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsCreate(jobPostingRequest: JobPostingRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobPosting> {
            return localVarFp.apiV1JobsCreate(jobPostingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsDestroy(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1JobsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<JobPosting>> {
            return localVarFp.apiV1JobsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {PatchedJobPostingRequest} [patchedJobPostingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsPartialUpdate(id: number, patchedJobPostingRequest?: PatchedJobPostingRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobPosting> {
            return localVarFp.apiV1JobsPartialUpdate(id, patchedJobPostingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<JobPosting> {
            return localVarFp.apiV1JobsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job posting.
         * @param {JobPostingRequest} jobPostingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1JobsUpdate(id: number, jobPostingRequest: JobPostingRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobPosting> {
            return localVarFp.apiV1JobsUpdate(id, jobPostingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobPostingApi - object-oriented interface
 * @export
 * @class JobPostingApi
 * @extends {BaseAPI}
 */
export class JobPostingApi extends BaseAPI {
    /**
     * 
     * @param {JobPostingRequest} jobPostingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobPostingApi
     */
    public apiV1JobsCreate(jobPostingRequest: JobPostingRequest, options?: RawAxiosRequestConfig) {
        return JobPostingApiFp(this.configuration).apiV1JobsCreate(jobPostingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job posting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobPostingApi
     */
    public apiV1JobsDestroy(id: number, options?: RawAxiosRequestConfig) {
        return JobPostingApiFp(this.configuration).apiV1JobsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobPostingApi
     */
    public apiV1JobsList(options?: RawAxiosRequestConfig) {
        return JobPostingApiFp(this.configuration).apiV1JobsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job posting.
     * @param {PatchedJobPostingRequest} [patchedJobPostingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobPostingApi
     */
    public apiV1JobsPartialUpdate(id: number, patchedJobPostingRequest?: PatchedJobPostingRequest, options?: RawAxiosRequestConfig) {
        return JobPostingApiFp(this.configuration).apiV1JobsPartialUpdate(id, patchedJobPostingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job posting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobPostingApi
     */
    public apiV1JobsRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return JobPostingApiFp(this.configuration).apiV1JobsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job posting.
     * @param {JobPostingRequest} jobPostingRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobPostingApi
     */
    public apiV1JobsUpdate(id: number, jobPostingRequest: JobPostingRequest, options?: RawAxiosRequestConfig) {
        return JobPostingApiFp(this.configuration).apiV1JobsUpdate(id, jobPostingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

